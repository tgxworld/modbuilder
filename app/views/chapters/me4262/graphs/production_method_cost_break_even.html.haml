.large-9.large-centered.columns
  .row.text-center
    %h1
      Production Method Cost Break Even Graph
  .row
    .large-9.columns
      .row
        #chart
          %svg

      .row
        .small-6.columns
          .row.collapse
            %label Profit Break Even Point
            .small-9.columns
              %input{ type: 'number', name: 'profit_break_even_point' }
            .small-3.columns
              %span.postfix
                units/yr

        .small-6.columns
          .row.collapse
            %label Total Time Required
            .small-9.columns
              %input{ type: 'number', name: 'total_time_required' }
            .small-3.columns
              %span.postfix
                hr/yr

    .large-3.columns
      %form
        .row.collapse
          %label Machine Cost
          .small-2.columns
            %span.prefix
              $
          .small-10.columns
            %input{ type: 'number', name: 'machine_cost', value: 66063 }

        .row.collapse
          %label Salvage Value
          .small-2.columns
            %span.prefix
              $
          .small-10.columns
            %input{ type: 'number', name: 'salvage_value', value: 5000 }

        .row.collapse
          %label Maintenance Cost
          .small-2.columns
            %span.prefix
              $
          .small-10.columns
            %input{ type: 'number', name: 'maintenance_cost', value: 2000 }

        .row.collapse
          %label Labour Cost
          .small-2.columns
            %span.prefix
              $
          .small-7.columns
            %input{ type: 'number', name: 'labour_cost', value: 10 }
          .small-3.columns
            %span.postfix
              \/hr

        .row.collapse
          %label Revenue
          .small-2.columns
            %span.prefix
              $
          .small-7.columns
            %input{ type: 'number', name: 'revenue', value: 1 }
          .small-3.columns
            %span.postfix
              \/unit

        .row.collapse
          %label Service Life
          .small-9.columns
            %input{ type: 'number', name: 'service_life', value: 7 }
          .small-3.columns
            %span.postfix
              years

        .row.collapse
          %label Production Rate
          .small-8.columns
            %input{ type: 'number', name: 'production_rate', value: 20 }
          .small-4.columns
            %span.postfix
              units/hr

        .row.collapse
          %label Machine Overhead Rate
          .small-10.columns
            %input{ type: 'number', name: 'machine_overhead_rate', value: 15 }
          .small-2.columns
            %span.postfix
              \%

        .row.collapse
          %label Labour Overhead
          .small-10.columns
            %input{ type: 'number', name: 'labour_overhead', value: 30 }
          .small-2.columns
            %span.postfix
              \%

        .row.collapse
          %label Rate of Return
          .small-10.columns
            %input{ type: 'number', name: 'rate_of_return', value: 20 }
          .small-2.columns
            %span.postfix
              \%

:javascript
  jQuery(function($) {
    nv.addGraph(function() {
      var chart = nv.models.lineChart()
        .margin({left: 100})  //Adjust chart margins to give the x-axis some breathing room.
        .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
        .transitionDuration(350)  //how fast do you want the lines to transition?
        .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
        .showYAxis(true)        //Show the y-axis
        .showXAxis(true)        //Show the x-axis
      ;

      chart.xAxis     //Chart x-axis settings
        .axisLabel("Annual Output")

      chart.yAxis     //Chart y-axis settings
        .axisLabel('Cost / Revenue')

      /* Done setting the chart up? Time to render it!*/
      var myData = generateLineData();

      d3.select('#chart svg')    //Select the <svg> element you want to render the chart in.
        .datum(myData)         //Populate the <svg> element with chart data...
        .call(chart);          //Finally, render the chart!

      //Update the chart when window resizes.
      nv.utils.windowResize(function() { chart.update() });

      d3.selectAll('input').each(function() {
        d3.select(this).on('input', function() {
          updateChart(chart);
        })
      });

      return chart;
    });

    function updateChart(chart) {
      var myData = generateLineData();

      d3.select('#chart svg')
        .datum(myData)
        .call(chart)
    }

    function capitalReturnFactor(rate_of_return, service_life) {
      rate_of_return = rate_of_return * 0.01;
      return ((rate_of_return * Math.pow((rate_of_return + 1), service_life)) / (Math.pow((rate_of_return + 1), service_life) - 1));
    }

    function variableCostOfLabour(labour_cost, labour_overhead, production_rate) {
      return (labour_cost * (100 + labour_overhead) / 100 / production_rate);
    }

    function sinkingFundFactor(rate_of_return, service_life) {
      rate_of_return = rate_of_return * 0.01;
      return (rate_of_return/(Math.pow((1 + rate_of_return), service_life) - 1));
    }

    function uniformAnnualCost(machine_cost, maintenance_cost, salvage_value, rate_of_return, service_life) {
      var capital_return_factor = capitalReturnFactor(rate_of_return, service_life);
      var sinking_fund_factor = sinkingFundFactor(rate_of_return, service_life);
      return ((machine_cost * capital_return_factor) + maintenance_cost - (salvage_value * sinking_fund_factor));
    }

    function uniformAnnualCostWithMachineOverhead(uniform_annual_cost, machine_overhead_rate) {
      machine_overhead_rate = machine_overhead_rate / 100;
      return (uniform_annual_cost * (1 + machine_overhead_rate));
    }

    function calculateRevenue(revenue, number_of_units) {
      return (revenue * number_of_units);
    }

    function calculateCost(cost, variable_cost, number_of_units) {
      return (cost + (number_of_units * variable_cost)).toFixed(2);
    }

    function setBreakEvenValues(revenue, cost, variable_cost, production_rate) {
      units = (cost / (revenue - variable_cost));
      time = (units / production_rate);
      d3.select('input[name=profit_break_even_point]').property('value', units.toFixed(2));
      d3.select('input[name=total_time_required]').property('value', time.toFixed(2));
      return parseInt(units);
    }

    function generateLineData() {
      var revenue = parseInt(d3.select('input[name=revenue]').property('value'));
      var labour_cost = parseInt(d3.select('input[name=labour_cost]').property('value'));
      var machine_cost = parseInt(d3.select('input[name=machine_cost]').property('value'));
      var maintenance_cost = parseInt(d3.select('input[name=maintenance_cost]').property('value'));
      var salvage_value = parseInt(d3.select('input[name=salvage_value]').property('value'));
      var service_life = parseInt(d3.select('input[name=service_life]').property('value'));
      var production_rate = parseInt(d3.select('input[name=production_rate]').property('value'));
      var machine_overhead_rate = parseInt(d3.select('input[name=machine_overhead_rate]').property('value'));
      var labour_overhead = parseInt(d3.select('input[name=labour_overhead]').property('value'));
      var rate_of_return = parseInt(d3.select('input[name=rate_of_return]').property('value'));

      var variable_cost_of_labour = variableCostOfLabour(labour_cost, labour_overhead, production_rate);
      var uniform_annual_cost = uniformAnnualCost(machine_cost, maintenance_cost, salvage_value, rate_of_return, service_life);
      var uniform_annual_cost_with_overhead = uniformAnnualCostWithMachineOverhead(uniform_annual_cost, machine_overhead_rate);

      var revenueData = [];
      var costData = [];
      var breakEvenUnits;

      breakEvenUnits = setBreakEvenValues(revenue, uniform_annual_cost_with_overhead, variable_cost_of_labour, production_rate);

      for (var units = 0; units <= 1000; units++) {
        var unitsScale = units * 100;
        var revenuePoint = calculateRevenue(revenue, unitsScale);
        var costPoint = calculateCost(uniform_annual_cost_with_overhead, variable_cost_of_labour, unitsScale)

        revenueData.push({ x: unitsScale, y: revenuePoint });
        costData.push({ x: unitsScale, y: costPoint });

        if ((revenuePoint - 10000) > costPoint) break;
      }

      //Line chart data should be sent as an array of series objects.
      return [
        {
          values: revenueData,      //values - represents the array of {x,y} data points
          key: 'Revenue', //key  - the name of the series.
          color: '#ff7f0e'  //color - optional: choose your own line color.
        },
        {
          values: costData,
          key: 'Total Cost',
          color: '#2ca02c'
        }
      ];
    }
  });
